/**
 * generated by Xtext 2.12.0
 */
package org.xtext.tdl.tdl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.tdl.tdl.CompositeTask;
import org.xtext.tdl.tdl.Model;
import org.xtext.tdl.tdl.Robot;
import org.xtext.tdl.tdl.TdlPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Model</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.tdl.tdl.impl.ModelImpl#getCompositeTasks <em>Composite Tasks</em>}</li>
 *   <li>{@link org.xtext.tdl.tdl.impl.ModelImpl#getRobots <em>Robots</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ModelImpl extends MinimalEObjectImpl.Container implements Model
{
  /**
   * The cached value of the '{@link #getCompositeTasks() <em>Composite Tasks</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCompositeTasks()
   * @generated
   * @ordered
   */
  protected EList<CompositeTask> compositeTasks;

  /**
   * The cached value of the '{@link #getRobots() <em>Robots</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRobots()
   * @generated
   * @ordered
   */
  protected EList<Robot> robots;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModelImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TdlPackage.Literals.MODEL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<CompositeTask> getCompositeTasks()
  {
    if (compositeTasks == null)
    {
      compositeTasks = new EObjectContainmentEList<CompositeTask>(CompositeTask.class, this, TdlPackage.MODEL__COMPOSITE_TASKS);
    }
    return compositeTasks;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Robot> getRobots()
  {
    if (robots == null)
    {
      robots = new EObjectContainmentEList<Robot>(Robot.class, this, TdlPackage.MODEL__ROBOTS);
    }
    return robots;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TdlPackage.MODEL__COMPOSITE_TASKS:
        return ((InternalEList<?>)getCompositeTasks()).basicRemove(otherEnd, msgs);
      case TdlPackage.MODEL__ROBOTS:
        return ((InternalEList<?>)getRobots()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TdlPackage.MODEL__COMPOSITE_TASKS:
        return getCompositeTasks();
      case TdlPackage.MODEL__ROBOTS:
        return getRobots();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TdlPackage.MODEL__COMPOSITE_TASKS:
        getCompositeTasks().clear();
        getCompositeTasks().addAll((Collection<? extends CompositeTask>)newValue);
        return;
      case TdlPackage.MODEL__ROBOTS:
        getRobots().clear();
        getRobots().addAll((Collection<? extends Robot>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TdlPackage.MODEL__COMPOSITE_TASKS:
        getCompositeTasks().clear();
        return;
      case TdlPackage.MODEL__ROBOTS:
        getRobots().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TdlPackage.MODEL__COMPOSITE_TASKS:
        return compositeTasks != null && !compositeTasks.isEmpty();
      case TdlPackage.MODEL__ROBOTS:
        return robots != null && !robots.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ModelImpl
