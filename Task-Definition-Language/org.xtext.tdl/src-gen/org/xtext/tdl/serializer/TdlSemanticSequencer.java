/*
 * generated by Xtext 2.12.0
 */
package org.xtext.tdl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.tdl.services.TdlGrammarAccess;
import org.xtext.tdl.tdl.Argument;
import org.xtext.tdl.tdl.CompositeTask;
import org.xtext.tdl.tdl.InitializationModule;
import org.xtext.tdl.tdl.Model;
import org.xtext.tdl.tdl.ParameterList;
import org.xtext.tdl.tdl.PublishedData;
import org.xtext.tdl.tdl.Robot;
import org.xtext.tdl.tdl.RosNode;
import org.xtext.tdl.tdl.SimpleAction;
import org.xtext.tdl.tdl.SimpleActionReference;
import org.xtext.tdl.tdl.Task;
import org.xtext.tdl.tdl.TdlPackage;
import org.xtext.tdl.tdl.Topic;

@SuppressWarnings("all")
public class TdlSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TdlGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TdlPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TdlPackage.ARGUMENT:
				sequence_Argument(context, (Argument) semanticObject); 
				return; 
			case TdlPackage.COMPOSITE_TASK:
				sequence_CompositeTask(context, (CompositeTask) semanticObject); 
				return; 
			case TdlPackage.INITIALIZATION_MODULE:
				sequence_InitializationModule(context, (InitializationModule) semanticObject); 
				return; 
			case TdlPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case TdlPackage.PARAMETER:
				sequence_Parameter(context, (org.xtext.tdl.tdl.Parameter) semanticObject); 
				return; 
			case TdlPackage.PARAMETER_LIST:
				sequence_ParameterList(context, (ParameterList) semanticObject); 
				return; 
			case TdlPackage.PUBLISHED_DATA:
				sequence_PublishedData(context, (PublishedData) semanticObject); 
				return; 
			case TdlPackage.ROBOT:
				sequence_Robot(context, (Robot) semanticObject); 
				return; 
			case TdlPackage.ROS_NODE:
				sequence_RosNode(context, (RosNode) semanticObject); 
				return; 
			case TdlPackage.SIMPLE_ACTION:
				sequence_SimpleAction(context, (SimpleAction) semanticObject); 
				return; 
			case TdlPackage.SIMPLE_ACTION_REFERENCE:
				sequence_SimpleActionReference(context, (SimpleActionReference) semanticObject); 
				return; 
			case TdlPackage.TASK:
				sequence_Task(context, (Task) semanticObject); 
				return; 
			case TdlPackage.TOPIC:
				sequence_Topic(context, (Topic) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Argument returns Argument
	 *
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_Argument(ISerializationContext context, Argument semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TdlPackage.Literals.ARGUMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TdlPackage.Literals.ARGUMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getArgumentAccess().getNameSTRINGTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CompositeTask returns CompositeTask
	 *
	 * Constraint:
	 *     (name=ID tasks+=Task*)
	 */
	protected void sequence_CompositeTask(ISerializationContext context, CompositeTask semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InitializationModule returns InitializationModule
	 *
	 * Constraint:
	 *     codeBlock=CodeBlock
	 */
	protected void sequence_InitializationModule(ISerializationContext context, InitializationModule semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TdlPackage.Literals.INITIALIZATION_MODULE__CODE_BLOCK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TdlPackage.Literals.INITIALIZATION_MODULE__CODE_BLOCK));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInitializationModuleAccess().getCodeBlockCodeBlockParserRuleCall_2_0(), semanticObject.getCodeBlock());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     ((compositeTasks+=CompositeTask+ robots+=Robot+) | robots+=Robot+)?
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ParameterList returns ParameterList
	 *
	 * Constraint:
	 *     codeBlock=CodeBlock
	 */
	protected void sequence_ParameterList(ISerializationContext context, ParameterList semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TdlPackage.Literals.PARAMETER_LIST__CODE_BLOCK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TdlPackage.Literals.PARAMETER_LIST__CODE_BLOCK));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterListAccess().getCodeBlockCodeBlockParserRuleCall_2_0(), semanticObject.getCodeBlock());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Parameter(ISerializationContext context, org.xtext.tdl.tdl.Parameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TdlPackage.Literals.PARAMETER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TdlPackage.Literals.PARAMETER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PublishedData returns PublishedData
	 *
	 * Constraint:
	 *     topics+=Topic+
	 */
	protected void sequence_PublishedData(ISerializationContext context, PublishedData semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Robot returns Robot
	 *
	 * Constraint:
	 *     (name=ID publishedData=PublishedData? initializationModule=InitializationModule? simpleActions+=SimpleAction* rosNodes+=RosNode*)
	 */
	protected void sequence_Robot(ISerializationContext context, Robot semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RosNode returns RosNode
	 *
	 * Constraint:
	 *     ((name=ID codeBlock=CodeBlock) | (name=ID nodeType=STRING nodeName=STRING nodeArgs=STRING? parameterList=ParameterList?))
	 */
	protected void sequence_RosNode(ISerializationContext context, RosNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SimpleActionReference returns SimpleActionReference
	 *
	 * Constraint:
	 *     (name=ID ((id=STRING? sync=INT? after=STRING? arguments+=Argument*) | positional='(lat,lng):')?)
	 */
	protected void sequence_SimpleActionReference(ISerializationContext context, SimpleActionReference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SimpleAction returns SimpleAction
	 *
	 * Constraint:
	 *     (name=ID (parameters+=Parameter+ | positional='(lat,lng):')? codeBlock=CodeBlock)
	 */
	protected void sequence_SimpleAction(ISerializationContext context, SimpleAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Task returns Task
	 *
	 * Constraint:
	 *     (name=ID simpleActions+=SimpleActionReference*)
	 */
	protected void sequence_Task(ISerializationContext context, Task semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Topic returns Topic
	 *
	 * Constraint:
	 *     (name=ID topic=STRING)
	 */
	protected void sequence_Topic(ISerializationContext context, Topic semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TdlPackage.Literals.TOPIC__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TdlPackage.Literals.TOPIC__NAME));
			if (transientValues.isValueTransient(semanticObject, TdlPackage.Literals.TOPIC__TOPIC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TdlPackage.Literals.TOPIC__TOPIC));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTopicAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getTopicAccess().getTopicSTRINGTerminalRuleCall_2_0(), semanticObject.getTopic());
		feeder.finish();
	}
	
	
}
