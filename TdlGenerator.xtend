/*
 * generated by Xtext 2.13.0
 */
package org.xtext.tdl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

import org.xtext.tdl.tdl.Robot
import org.xtext.tdl.tdl.Task
import helperMethods.HelperMethods
import java.util.ArrayList

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class TdlGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
  
  		var robot_nr = 1
		for (robot : resource.allContents.toIterable.filter(Robot)) {
			val generated_string = generate_robot_files(robot, robot_nr).toString
			val generated_string_without_tabs = HelperMethods.removeLeadingTabs(generated_string)
			fsa.generateFile("/" + robot.name + ".py", generate_robot_files_from_string(generated_string_without_tabs))
			robot_nr++
        }
        fsa.generateFile("/backend.py", generate_python_backend(resource))
		fsa.generateFile("/index.html", generate_web_interface(resource))
	}
	
	
	def generate_robot_files(Robot robot, int robot_nr)
	
	'''
	
	«"\t\t"»«robot.setupMethod.codeBlock»
	
			«FOR action : robot.simpleActionDefinitions»
			def «action.name»():
			«"\t\t"»«action.codeBlock»
			«ENDFOR»
			
			«FOR line : HelperMethods.get_codeLines_from_file(1, 182, "/runTimeEngine/Runtime_Engine_Slave.py")»
			«line»
			«ENDFOR»
			
			my_actions_table = {
			        "actions": [
			        «FOR action : robot.simpleActionDefinitions»
			          {
			            "action_name" : "«action.name»",
			            "action_status" : "not_doing"
			          },
			          «ENDFOR»
			        ]
			    }
			    
			robot_status_table = {
			        "robot_id": "«robot_nr»",
			        "ip_address": "0",
			        "recovering": "0",
			        "recovered_from_task_with_id": "0"
			    }
			
			«FOR line : HelperMethods.get_codeLines_from_file(183, 9999, "/runTimeEngine/Runtime_Engine_Slave.py")»
			«line»
			«ENDFOR»
	
	'''
	
	
	
	def generate_robot_files_from_string(ArrayList<String> lines)
	
	'''
	
	«FOR line : lines»
	«line»
	«ENDFOR»
	
	'''
	
	
	
	def generate_python_backend(Resource resource) 
	
	'''
	
	«FOR line : HelperMethods.get_codeLines_from_file(1, 700, "/runTimeEngine/backend.py")»
	«line»
	«ENDFOR»
	
	task_definitions = {
				        "tasks": [
				        «FOR task : resource.allContents.toIterable.filter(Task)»
				        {
				        	"task_name" : "«task.name»",
				        	"actions" : [
				        	«FOR simpleAction : task.simpleActions »
				        		{
				        		"action_name" : "«simpleAction.name»",
				        		"action_status" : "not_doing"
				        		},
				          	«ENDFOR»
				          	]
				        },
				          «ENDFOR»
				          
				        ]
				    }
				    
	«FOR line : HelperMethods.get_codeLines_from_file(701, 9999, "/runTimeEngine/backend.py")»
	«line»
	«ENDFOR»
	
	'''
	
	
	
	def generate_web_interface(Resource resource)
	'''
	
	«FOR line : HelperMethods.get_codeLines_from_file(1, 40, "/runTimeEngine/index.html")»
	«line»
	«ENDFOR»
	
	«FOR task : resource.allContents.toIterable.filter(Task)»
	<input id="«task.name»" class="button_task" type="button" value="«task.name»" onclick="taskClicked('«task.name»');" />
	«ENDFOR»
	
	«FOR line : HelperMethods.get_codeLines_from_file(41, 9999, "/runTimeEngine/index.html")»
	«line»
	«ENDFOR»
	
	'''

	
}






