/*
 * generated by Xtext 2.13.0
 */
package org.xtext.tdl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

import org.xtext.tdl.tdl.Robot
import org.xtext.tdl.tdl.Task
import helperMethods.HelperMethods

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class TdlGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
  
		for (robot : resource.allContents.toIterable.filter(Robot)) {
			fsa.generateFile("/generated_files/" + robot.name + ".py", generate_robot_files(robot))
        }
        fsa.generateFile("/generated_files/backend.py", generate_python_backend(resource))
		fsa.generateFile("/generated_files/index.html", generate_web_interface(resource))
	}
	
	
	def generate_robot_files(Robot robot)
	'''
	
	«"\t\t"»«robot.setupMethod.codeBlock»
	
			«FOR action : robot.simpleActionDefinitions»
			def «action.name»():
			«"\t\t"»«action.codeBlock»
			«ENDFOR»
			
			«FOR line : HelperMethods.get_runtime_Engine()»
			«line»
			«ENDFOR»
	
	
	
	'''
	
	def generate_python_backend(Resource resource) 
	
	
	'''
	
	«FOR line : HelperMethods.get_python_backend()»
	«line»
	«ENDFOR»

	
	
	
	'''
	
	def generate_web_interface(Resource resource)
	'''
	
	«FOR line : HelperMethods.get_first_part_of_web_interface()»
	«line»
	«ENDFOR»
	
	«FOR task : resource.allContents.toIterable.filter(Task)»
	<input id="«task.name»" class="button_task" type="button" value="«task.name»" onclick="taskClicked('«task.name»');" />
	«ENDFOR»
	
	«FOR line : HelperMethods.get_second_part_of_web_interface()»
	«line»
	«ENDFOR»

	
	
	'''

	
}





