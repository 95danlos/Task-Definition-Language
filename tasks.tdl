task turnLeft():             
	turnLeft
	
task turnRight(): 
	turnRight
	
task moveForward():   
	moveForward
	
task moveBackwards():     
	moveBackwards

task turnAround():  
	turnLeft
	turnLeft
	
task raiseGripper():
	raiseGripper
	
	      
	 
	   
robot youbot: 

	setup:
		import rospy
		from time import sleep as _sleep
		from geometry_msgs.msg import *
		from geometry_msgs.msg import *
		from gazebo_msgs.srv import *
		from gazebo_msgs.msg import *
		
		rospy.init_node('youbot', anonymous=True)
		set_state = rospy.ServiceProxy("/gazebo/set_model_state",SetModelState)
		
		twist = Twist()
		state = ModelState()
		state.model_name = "youbot"
		state.reference_frame = "youbot" 
		
		
	simpleAction goTo(lat,lng):
		import actionlib
		from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
		
		client = actionlib.SimpleActionClient('youbot/move_base', MoveBaseAction)
		
		client.wait_for_server()
		
		goal = MoveBaseGoal()
		
		goal.target_pose.header.frame_id = "map"
		goal.target_pose.pose.position.x = lat*2000
		goal.target_pose.pose.position.y = lng*1000
		goal.target_pose.pose.orientation.w = 1
		
		client.send_goal(goal)
		
		r = rospy.Rate(0.5)
		status = ""
		while (not rospy.is_shutdown() and status != "Goal reached."):
		  status = client.get_goal_status_text()
		  r.sleep()
		
	
	
	simpleAction moveForward():
		twist.linear.x = 1
		twist.angular.z = 0
		state.twist = twist
		
		ret = set_state(state)
		_sleep(1)
		
		twist.linear.x = 0
		twist.angular.z = 0
		state.twist = twist
		
		ret = set_state(state)
		
		
	simpleAction moveBackwards():
		twist.linear.x = -1
		twist.angular.z = 0
		state.twist = twist
		
		ret = set_state(state)
		_sleep(1)
		
		twist.linear.x = 0
		twist.angular.z = 0
		state.twist = twist
		
		ret = set_state(state)
		
		
	simpleAction turnLeft():
		twist.linear.x = 0
		twist.angular.z = 2.1
		state.twist = twist
		
		ret = set_state(state)
		_sleep(1)
		
		twist.linear.x = 0
		twist.angular.z = 0
		state.twist = twist
		
		ret = set_state(state)
		
		
	simpleAction turnRight(): 
		twist.linear.x = 0
		twist.angular.z = -2.1
		state.twist = twist
		
		ret = set_state(state)
		_sleep(1)
		
		twist.linear.x = 0
		twist.angular.z = 0
		state.twist = twist
		
		ret = set_state(state)
		
		
	processingNode youbot_sensor_source():
		
		import rospy
		from sensor_msgs.msg import LaserScan
		
		rospy.init_node('sensor_source', anonymous=True)
		
		scan_pub = rospy.Publisher('scan', LaserScan, queue_size=50)
		
		
		def callback(data):
			scan_pub.publish(data)
			
		
		rospy.Subscriber("youbot/scan", LaserScan, callback)  
		
		rospy.spin()
		
		
		
	processingNode youbot_odometry_source():
		
		import rospy
		import tf
		from tf2_msgs.msg import TFMessage
		from math import sin, cos, pi
		from nav_msgs.msg import Odometry
		from sensor_msgs.msg import LaserScan
		from geometry_msgs.msg import Point, Pose, Quaternion, Twist, Vector3, TransformStamped
		
		from time import sleep as _sleep
		from geometry_msgs.msg import Pose
		from geometry_msgs.msg import Twist
		from gazebo_msgs.srv import GetModelState
		from gazebo_msgs.srv import SetModelState
		from gazebo_msgs.msg import ModelState
		
		rospy.init_node('odometry_source', anonymous=True)
		
		
		rospy.wait_for_service("/gazebo/get_model_state")
		rospy.wait_for_service("/gazebo/set_model_state")
		get_state = rospy.ServiceProxy("/gazebo/get_model_state", GetModelState)
		set_state = rospy.ServiceProxy("/gazebo/set_model_state", SetModelState)
		
		odom_pub = rospy.Publisher("odom", Odometry, queue_size=50)
		odom_broadcaster = tf.TransformBroadcaster()
		
		
		r = rospy.Rate(20)
		while (not rospy.is_shutdown()):
			current_time = rospy.Time.now()
		
			response = get_state("youbot", "")
		
		
			quaternion = (
			    response.pose.orientation.x,
			    response.pose.orientation.y,
			    response.pose.orientation.z,
			    response.pose.orientation.w)
			euler = tf.transformations.euler_from_quaternion(quaternion)
			roll = euler[0]
			pitch = euler[1]
			yaw = euler[2]
		
		
			odom_broadcaster.sendTransform(
			(response.pose.position.x, response.pose.position.y, 0.),
			quaternion,
			current_time,
			"base_link",
			"odom"
			)
			
		
		
			odom = Odometry()
			odom.header.stamp = current_time
			odom.header.frame_id = "odom"
		
			#odom.pose.pose = Pose(Point(x, y, 0.), Quaternion(*odom_quat))
			odom.pose.pose = response.pose
		
			odom.child_frame_id = "base_link"
			odom.twist.twist = response.twist
		
			odom_pub.publish(odom)
		
		
			r.sleep()
		



	processingNode youbot_base_controller():
		
		import rospy
		from geometry_msgs.msg import Twist
		from gazebo_msgs.srv import SetModelState
		from gazebo_msgs.msg import ModelState
		
		
		def callback(data):
		
			twist = Twist()
		
			twist.linear.x = data.linear.x
			twist.linear.y = data.linear.y
			twist.linear.z = data.linear.z
		
			twist.angular.x = data.angular.x
			twist.angular.y = data.angular.y
			twist.angular.z = data.angular.z
		
		
			state = ModelState()
		
			state.model_name = "youbot"
			state.twist = twist
			state.reference_frame = "youbot" 
		
			ret = set_state(state)
			
		
		
		rospy.init_node('base_controller', anonymous=True)
		set_state = rospy.ServiceProxy("/gazebo/set_model_state", SetModelState)
		rospy.Subscriber("cmd_vel", Twist, callback)
		
		rospy.spin()









robot turtlebot:
	
	setup:
		import rospy
		from time import sleep as _sleep
		from geometry_msgs.msg import *
		from geometry_msgs.msg import *
		from gazebo_msgs.srv import *
		from gazebo_msgs.msg import *
	
		rospy.init_node('turtlebot', anonymous=True)
		set_state = rospy.ServiceProxy("/gazebo/set_model_state",SetModelState)
		
		twist = Twist()
		state = ModelState()
		state.model_name = "turtlebot"
		state.reference_frame = "turtlebot" 




	processingNode turtlebot_sensor_source():
		
		import rospy
		from sensor_msgs.msg import LaserScan
		
		rospy.init_node('sensor_source', anonymous=True)
		
		scan_pub = rospy.Publisher('scan', LaserScan, queue_size=50)
		
		
		def callback(data):
			scan_pub.publish(data)
			
		
		rospy.Subscriber("turtlebot/scan", LaserScan, callback)
		
		rospy.spin()
		
		
		
	processingNode turtlebot_odometry_source():
	
		import rospy
		import tf
		from tf2_msgs.msg import TFMessage
		from math import sin, cos, pi
		from nav_msgs.msg import Odometry
		from sensor_msgs.msg import LaserScan
		from geometry_msgs.msg import Point, Pose, Quaternion, Twist, Vector3, TransformStamped
		
		from time import sleep as _sleep
		from geometry_msgs.msg import Pose
		from geometry_msgs.msg import Twist
		from gazebo_msgs.srv import GetModelState
		from gazebo_msgs.srv import SetModelState
		from gazebo_msgs.msg import ModelState
		
		rospy.init_node('odometry_source', anonymous=True)
		
		
		rospy.wait_for_service("/gazebo/get_model_state")
		rospy.wait_for_service("/gazebo/set_model_state")
		get_state = rospy.ServiceProxy("/gazebo/get_model_state", GetModelState)
		set_state = rospy.ServiceProxy("/gazebo/set_model_state", SetModelState)
		
		odom_pub = rospy.Publisher("odom", Odometry, queue_size=50)
		odom_broadcaster = tf.TransformBroadcaster()
		
		
		r = rospy.Rate(20)
		while (not rospy.is_shutdown()):
			current_time = rospy.Time.now()
		
			response = get_state("turtlebot", "")
		
		
			quaternion = (
			    response.pose.orientation.x,
			    response.pose.orientation.y,
			    response.pose.orientation.z,
			    response.pose.orientation.w)
			euler = tf.transformations.euler_from_quaternion(quaternion)
			roll = euler[0]
			pitch = euler[1]
			yaw = euler[2]
		
		
			odom_broadcaster.sendTransform(
			(response.pose.position.x, response.pose.position.y, 0.),
			quaternion,
			current_time,
			"base_link",
			"odom"
			)
			
		
			odom = Odometry()
			odom.header.stamp = current_time
			odom.header.frame_id = "odom"
		
			odom.pose.pose = response.pose
		
			odom.child_frame_id = "base_link"
			odom.twist.twist = response.twist
		
			odom_pub.publish(odom)
		
		
			r.sleep()
		





	processingNode turtlebot_base_controller():
		
		import rospy
		from geometry_msgs.msg import Twist
		from gazebo_msgs.srv import SetModelState
		from gazebo_msgs.msg import ModelState
		
		
		def callback(data):
		
			twist = Twist()
		
			twist.linear.x = data.linear.x
			twist.linear.y = data.linear.y
			twist.linear.z = data.linear.z
		
			twist.angular.x = data.angular.x
			twist.angular.y = data.angular.y
			twist.angular.z = data.angular.z
		
		
			state = ModelState()
		
			state.model_name = "turtlebot"
			state.twist = twist
			state.reference_frame = "turtlebot" 
		
			ret = set_state(state)
			
		
		
		rospy.init_node('base_controller', anonymous=True)
		set_state = rospy.ServiceProxy("/gazebo/set_model_state", SetModelState)
		rospy.Subscriber("cmd_vel", Twist, callback)
		
		rospy.spin()


	